[options]
  UseSyslog

{% for key, value in iptables__knock_rules | dictsort %}
[KNOCK_{{ key }}]
  Sequence = {{ value.port_sequence | join(",") }}
  Seq_Timeout = {{ value.sequence_timeout | d(5) }}
  TCPFlags = {{ value.tcpflags | d('syn') }}
  Cmd_Timeout = {{ value.window_timeout | d(10) }}
{%   if ( value.rule.protocol is defined and value.rule.protocol|lower == "icmp" ) or ( value.rule.not_protocol is defined and value.rule.not_protocol|lower == "icmp" ) %}
  Start_Command = /sbin/iptables -A KNOCK_{{ key }} {% if value.rule.not_in_interface is defined -%} ! -i {{ value.rule.not_in_interface }} {% elif value.rule.in_interface is defined -%} -i {{ value.rule.in_interface }} {% endif -%} {% if value.rule.not_protocol is defined -%} ! -p {{ value.rule.not_protocol }} {% elif value.rule.protocol is defined -%} -p {{ value.rule.protocol }} {% endif -%} -s %IP% {% if value.rule.not_destination_address is defined -%} ! -d {{ value.rule.not_destination_address if value.rule.not_destination_address is string else value.rule.not_destination_address | join(',') }} {% elif value.rule.destination_address is defined -%} -d {{ value.rule.destination_address if value.rule.destination_address is string else value.rule.destination_address | join(',') }} {% endif -%} {% if value.rule.icmp_type is defined -%} --icmp-type {{ value.rule.icmp_type }} {% endif -%} -m conntrack --ctstate NEW {% if value.rule.comment is defined -%} -m comment --comment "KNOCK_{{ key }}:: {{ value.rule.comment }}" {% endif -%} {% if value.rule.match is defined -%} {{ value.rule.match }} {% endif -%} -j ACCEPT
  Stop_Command = /sbin/iptables -D KNOCK_{{ key }} {% if value.rule.not_in_interface is defined -%} ! -i {{ value.rule.not_in_interface }} {% elif value.rule.in_interface is defined -%} -i {{ value.rule.in_interface }} {% endif -%} {% if value.rule.not_protocol is defined -%} ! -p {{ value.rule.not_protocol }} {% elif value.rule.protocol is defined -%} -p {{ value.rule.protocol }} {% endif -%} -s %IP% {% if value.rule.not_destination_address is defined -%} ! -d {{ value.rule.not_destination_address if value.rule.not_destination_address is string else value.rule.not_destination_address | join(',') }} {% elif value.rule.destination_address is defined -%} -d {{ value.rule.destination_address if value.rule.destination_address is string else value.rule.destination_address | join(',') }} {% endif -%} {% if value.rule.icmp_type is defined -%} --icmp-type {{ value.rule.icmp_type }} {% endif -%} -m conntrack --ctstate NEW {% if value.rule.comment is defined -%} -m comment --comment "KNOCK_{{ key }}:: {{ value.rule.comment }}" {% endif -%} {% if value.rule.match is defined -%} {{ value.rule.match }} {% endif %} -j ACCEPT
{%   else %}
  Start_Command = /sbin/iptables -A KNOCK_{{ key }} {% if value.rule.not_in_interface is defined -%} ! -i {{ value.rule.not_in_interface }} {% elif value.rule.in_interface is defined -%} -i {{ value.rule.in_interface }} {% endif -%} {% if value.rule.not_protocol is defined -%} ! -p {{ value.rule.not_protocol|lower }} {% elif value.rule.protocol is defined -%} -p {{ value.rule.protocol|lower }} {% endif -%} -s %IP% {% if value.rule.not_source_port is defined -%} {% if value.rule.not_source_port is string or value.rule.not_source_port is number %} ! --sport {{ value.rule.not_source_port }} {% else %} -m multiport ! --sports {{ value.rule.not_source_port | join(',') }} {% endif -%} {% elif value.rule.source_port is defined -%} {% if value.rule.source_port is string or value.rule.source_port is number %} --sport {{ value.rule.source_port }} {% else %} -m multiport --sports {{ value.rule.source_port | join(',') }} {% endif -%} {% endif -%} {% if value.rule.not_destination_address is defined -%} ! -d {{ value.rule.not_destination_address if value.rule.not_destination_address is string else value.rule.not_destination_address | join(',') }} {% elif value.rule.destination_address is defined -%} -d {{ value.rule.destination_address if value.rule.destination_address is string else value.rule.destination_address | join(',') }} {% endif -%} {% if value.rule.not_destination_port is defined -%} {% if value.rule.not_destination_port is string or value.rule.not_destination_port is number %} ! --dport {{ value.rule.not_destination_port }} {% else %} -m multiport ! --dports {{ value.rule.not_destination_port | join(',') }} {% endif -%} {% elif value.rule.destination_port is defined -%} {% if value.rule.destination_port is string or value.rule.destination_port is number %} --dport {{ value.rule.destination_port }} {% else %} -m multiport --dports {{ value.rule.destination_port | join(',') }} {% endif -%} {% endif -%} {% if value.rule.protocol is defined and value.rule.protocol == "tcp" -%} --syn {% endif -%} -m conntrack --ctstate NEW {% if value.rule.comment is defined -%} -m comment --comment "KNOCK_{{ key }}:: {{ value.rule.comment }}" {% endif -%} {% if value.rule.match is defined -%} {{ value.rule.match }} {% endif -%} -j ACCEPT
  Stop_Command = /sbin/iptables -D KNOCK_{{ key }} {% if value.rule.not_in_interface is defined -%} ! -i {{ value.rule.not_in_interface }} {% elif value.rule.in_interface is defined -%} -i {{ value.rule.in_interface }} {% endif -%} {% if value.rule.not_protocol is defined -%} ! -p {{ value.rule.not_protocol|lower }} {% elif value.rule.protocol is defined -%} -p {{ value.rule.protocol|lower }} {% endif -%} -s %IP% {% if value.rule.not_source_port is defined -%} {% if value.rule.not_source_port is string or value.rule.not_source_port is number %} ! --sport {{ value.rule.not_source_port }} {% else %} -m multiport ! --sports {{ value.rule.not_source_port | join(',') }} {% endif -%} {% elif value.rule.source_port is defined -%} {% if value.rule.source_port is string or value.rule.source_port is number %} --sport {{ value.rule.source_port }} {% else %} -m multiport --sports {{ value.rule.source_port | join(',') }} {% endif -%} {% endif -%} {% if value.rule.not_destination_address is defined -%} ! -d {{ value.rule.not_destination_address if value.rule.not_destination_address is string else value.rule.not_destination_address | join(',') }} {% elif value.rule.destination_address is defined -%} -d {{ value.rule.destination_address if value.rule.destination_address is string else value.rule.destination_address | join(',') }} {% endif -%} {% if value.rule.not_destination_port is defined -%} {% if value.rule.not_destination_port is string or value.rule.not_destination_port is number %} ! --dport {{ value.rule.not_destination_port }} {% else %} -m multiport ! --dports {{ value.rule.not_destination_port | join(',') }} {% endif -%} {% elif value.rule.destination_port is defined -%} {% if value.rule.destination_port is string or value.rule.destination_port is number %} --dport {{ value.rule.destination_port }} {% else %} -m multiport --dports {{ value.rule.destination_port | join(',') }} {% endif -%} {% endif -%} {% if value.rule.protocol is defined and value.rule.protocol == "tcp" -%} --syn {% endif -%} -m conntrack --ctstate NEW {% if value.rule.comment is defined -%} -m comment --comment "KNOCK_{{ key }}:: {{ value.rule.comment }}" {% endif -%} {% if value.rule.match is defined -%} {{ value.rule.match }} {% endif -%} -j ACCEPT
{%   endif %}
{% endfor %}
